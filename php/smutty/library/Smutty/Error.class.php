<?php

define( 'ERR_ALL', 1 );
define( 'ERR_STANDARD', 2 );

/**
 *  this class handles all exceptions and warnings
 *  generated by smutty.
 *
 */

class Smutty_Error extends Exception {

    const FATAL = 1;
    const WARNING = 2;

	// warnings that have been generated
	private $warnings;

	// are templates enabled?
	private $useTemplates;

	// error types to show
	private $errorTypes;

    // smutty config
    private $cfg = null;

	/**
	 *  constructor
	 *
	 *  @return nothing
	 *
	 */

	function __construct( $cfg ) {

        $this->cfg = $cfg;

		$this->warnings = array();
		$this->useTemplates = false;
		$this->errorTypes = ERR_STANDARD;

	}

	/**
	 *  enables the use of smarty templates for error
	 *  reporting purposes
	 *
	 *  @return nothing
	 *
	 */

	function enableTemplates() {
		$this->useTemplates = true;
	}

	/**
	 *  returns a boolean indicating if templates will be
	 *  used when reporting an error
	 *
	 *  @return boolean are we using templates
	 *
	 */

	public function isUsingTemplates() {
		return $this->useTemplates;
	}

	/**
	 *  call this to raise a fatal error
	 *
	 *  @param String $message the error message
	 *  @param String $wikiHelp name of wiki help page
	 *  @param int $code http status code
	 *  @return nothing
	 *
	 */

	public function fatal( $message, $wikiHelp, $code = 500 ) {

		// has the user defined their own handler?
		if ( $handler = $this->cfg->get('errors.handler') ) {

			$parts = split( '/', $handler );
			$controller = $parts[ 0 ];
			$method = $parts[ 1 ];

			eval( ucfirst($controller) . 'Controller::'
				. $method . "( \$message );" );

		}

		else {

			if ( !headers_sent() )
				header( 'HTTP/1.1 ' . $code );
			if ( $this->useTemplates )
				$this->showTemplate($message,$wikiHelp,$code);
			else
				$this->showStandard($message,$wikiHelp,$code);
			exit();

		}

	}

	/**
	 *  this method is used to indicate that something has gone wrong, but
	 *  that it's not serious.  just a warning.  these warning messages
	 *  can then be reached by the getWarnings() method
	 *
	 *  @param String $message the warning message
	 *  @param String $wikiHelp the wiki help page
	 *  @return nothing
	 *
	 */

	public function warning( $message, $wikiHelp ) {

		$this->addWarning( $message, $wikiHelp );

	}

	/**
	 *  adds a warning message
	 *
	 *  @param String $message the warning message
	 *  @param String $wikiHelp the wiki help page
	 *  @return nothing
	 *
	 */

	function addWarning( $message, $wikiHelp ) {

		$warning = new stdclass();
		$warning->message = $message;
		$warning->wikiHelp = $wikiHelp;

		$this->warnings[] = $warning;

	}

	/**
	 *  returns an array of warning messages that have been generated
	 *
	 *  @return array array of warning strings
	 *
	 */

	public function getWarnings() {

		return $this->warnings;

	}

	/**
	 *  handles an error from php.
	 *
	 *  @param int $errno severity
	 *  @param String $errstr description
	 *  @param String $errfile the files full path
	 *  @param int $errline the line
	 *  @param int $errcon the contect
	 *  @return nothing
	 *
	 */

	public function errorHandler( $errno, $errstr, $errfile, $errline, $errcon ) {

		$showError = true;

		switch ( $this->errorTypes ) {
			case ERR_ALL:
				break;
			case ERR_STANDARD:
				if ( in_array($errno,array(E_NOTICE)) )
					$showError = false;
				break;
		}

		// really show the error?
		if ( $showError )
			Smutty_Error::fatal(
				"($errno) $errstr ($errfile, line $errline)",
				'SmuttyOverview'
			);

	}

	/**
	 *  shows an error message using smarty templates
	 *
	 *  @param String $message the error message
	 *  @param String $wikiHelp name of wiki help page
	 *  @return nothing
	 *
	 */

	private function showTemplate( $message, $wikiHelp, $code ) {

		$tpl = null;
		$tplFile = "error-$code.tpl";

		if ( file_exists("application/views/$tplFile") )
			$tpl = new Smutty_Template();
		else {
			$tpl = new Smutty_Template_Smutty();
			$tplFile = 'exception.tpl';
		}

		$tpl->assign( 'stack', debug_backtrace() );
		$tpl->assign( 'message', $message );
		$tpl->assign( 'wikiHelp', $wikiHelp );
		$tpl->display( $tplFile );

	}

	/**
	 *  shows an error message with standard output
	 *
	 *  @param String $message the error message
	 *  @param String $wikiHelp name of wiki help page
	 *  @return nothing
	 *
	 */

	private function showStandard( $message, $wikiHelp, $code ) {
?>
<html><head><title>Smutty Error</title></head><body>
<h1>&lt;Smutty Error&gt;</h1>
<p>Burp!  An error has occurred, the following message was reported:</p>
<blockquote><?= htmlspecialchars($message) ?></blockquote>
<p>You may be able to <a href="http://smutty.pu-gh.com/wiki/<?= urlencode($wikiHelp) ?>">find help
on the wiki</a>! (<?= htmlspecialchars($wikiHelp) ?>)</p>
</body></html>
<?
	}

	/**
	 *  sets the level of error reporting
	 *
	 *  @param int $type the errors types to show
	 *  @return nothing
	 *
	 */

	public function setErrorReporting( $type ) {

		$this->errorTypes = $type;

	}

	/**
	 *  returns the current level of error reporting
	 *
	 *  @return integer error reporting level
	 *
	 */

	public function getErrorReporting() {

		return $this->errorTypes;

	}

}
