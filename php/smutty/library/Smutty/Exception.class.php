<?

define( 'ERR_ALL', 1 );
define( 'ERR_STANDARD', 2 );

/**
 *  this class handles all exceptions and warnings
 *  generated by smutty.
 *
 */

class Smutty_Exception extends Smutty_Object {

	// warnings that have been generated
	private $warnings;

	// are templates enabled?
	private $useTemplates;

	// error types to show
	private $errorTypes;

	// singleton
	private static $instance = null;

	/**
	 *  constructor
	 *
	 *  @return nothing
	 *
	 */

	function __construct() {
		$this->warnings = array();
		$this->useTemplates = false;
		$this->errorTypes = ERR_STANDARD;
	}

	/**
	 *  enables the use of smarty templates for error
	 *  reporting purposes
	 *
	 *  @return nothing
	 *
	 */

	function enableTemplates() {
		$this->useTemplates = true;
	}

	/**
	 *  returns the singleton instance for this object.  this singleton
	 *  can then be used to set global error reporting options.
	 *
	 *  @return Smutty_Exception
	 *
	 */

	public static function &getInstance() {
		if ( self::$instance == null )
			self::$instance = new Smutty_Exception();
		return self::$instance;
	}

	/**
	 *  returns a boolean indicating if templates will be
	 *  used when reporting an error
	 *
	 *  @return boolean
	 *
	 */

	public function isUsingTemplates() {
		return $this->useTemplates;
	}

	/**
	 *  call this to raise a fatal error
	 *
	 *  @param String $message the error message
	 *  @param String $wikiHelp name of wiki help page
	 *  @param int $code http status code
	 *  @return nothing
	 *
	 */

	public static function fatal( $message, $wikiHelp, $code = 500 ) {
		$e =& Smutty_Exception::getInstance();
		header( 'HTTP/1.1 ' . $code );
		if ( $e->useTemplates )
			$e->showTemplate($message,$wikiHelp);
		else
			$e->showStandard($message,$wikiHelp);
		exit();
	}

	/**
	 *  this method is used to indicate that something has gone wrong, but
	 *  that it's not serious.  just a warning.  these warning messages
	 *  can then be reached by the getWarnings() method
	 *
	 *  @param String $message the warning message
	 *  @param String $wikiHelp the wiki help page
	 *  @return nothing
	 *
	 */

	public static function warning( $message, $wikiHelp ) {
		$e =& Smutty_Exception::getInstance();
		$e->addWarning( $message, $wikiHelp );
	}

	/**
	 *  adds a warning message
	 *
	 *  @param String $message the warning message
	 *  @param String $wikiHelp the wiki help page
	 *  @return nothing
	 *
	 */

	function addWarning( $message, $wikiHelp ) {
		$warning = new stdclass();
		$warning->message = $message;
		$warning->wikiHelp = $wikiHelp;
		$this->warnings[] = $warning;
	}

	/**
	 *  returns an array of warning messages that have been generated
	 *
	 *  @return array
	 *
	 */

	public function getWarnings() {
		return $this->warnings;
	}

	/**
	 *  handles an error from php.
	 *
	 *  @param int $errno severity
	 *  @param String $errstr description
	 *  @param String $errfile the files full path
	 *  @param int $errline the line
	 *  @param int $errcon the contect
	 *  @return nothing
	 *
	 */

	public function errorHandler( $errno, $errstr, $errfile, $errline, $errcon ) {
		$showError = true;
		switch ( $this->errorTypes ) {
			case ERR_ALL:
				break;
			case ERR_STANDARD:
				if ( in_array($errno,array(E_NOTICE)) )
					$showError = false;
				break;
		}
		// really show the error?
		if ( $showError )
			Smutty_Exception::fatal(
				"($errno) $errstr ($errfile, line $errline)",
				'SmuttyOverview'
			);
	}

	/**
	 *  shows an error message using smarty templates
	 *
	 *  @param String $message the error message
	 *  @param String $wikiHelp name of wiki help page
	 *  @return nothing
	 *
	 */

	private function showTemplate( $message, $wikiHelp ) {
		$tpl = new Smutty_Template_Smutty();
		$tpl->assign( 'stack', debug_backtrace() );
		$tpl->assign( 'message', $message );
		$tpl->assign( 'wikiHelp', $wikiHelp );
		$tpl->display( 'exception.tpl' );
	}

	/**
	 *  shows an error message with standard output
	 *
	 *  @param String $message the error message
	 *  @param String $wikiHelp name of wiki help page
	 *  @return nothing
	 *
	 */

	private function showStandard( $message, $wikiHelp ) {
?>
<html><head><title>Smutty Exception</title></head><body>
<h1>&lt;Smutty Exception&gt;</h1>
<p>Burp!  An error has occurred, the following message was reported:</p>
<blockquote><?= htmlspecialchars($message) ?></blockquote>
<p>You may be able to <a href="http://smutty.pu-gh.com/wiki/<?= urlencode($wikiHelp) ?>">find help
on the wiki</a>! (<?= htmlspecialchars($wikiHelp) ?>)</p>
</body></html>
<?
	}

	/**
	 *  sets the level of error reporting
	 *
	 *  @param int $type the errors types to show
	 *  @return nothing
	 *
	 */

	public static function setErrorReporting( $type ) {
		$e =& Smutty_Exception::getInstance();
		$e->errorTypes = $type;
	}

	/**
	 *  returns the current level of error reporting
	 *
	 *  @return integer
	 *
	 */

	public static function getErrorReporting() {
		$e =& Smutty_Exception::getInstance();
		return $e->errorTypes;
	}

}

?>
