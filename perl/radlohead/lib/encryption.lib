##################################################
##################################################
##
##  encryption.lib
##
##################################################
##################################################

use constant ENC_KEY => 15;

##################################################

require(BASE . "lib/system.lib");

##################################################
##
##  encrypt(scalar) : scalar
##
##################################################

sub encrypt {

  my $s = uc($_[0]);
  trim($s);

  $s =~ s/(.)/enc($1)/eg;
  return $s;

  sub enc {
    my $r = $_[0];
    if ($r eq "A") { return "P"; }
    if ($r eq "Z") { return "O"; }
    if (isChar($r)) {
      my $o;
      if ((ord($r) + ENC_KEY) > 90) { $o = 65 + ((ord($r) + (ENC_KEY-1)) - 90); }
        else { $o = ord($r) + ENC_KEY; }

      return chr($o);
    } else {
      return URLEncode($r);
    }
  }

}

##################################################
##
##  decrypt(scalar) : scalar
##
##  DECRYPTS A SCALAR
##
##  subs - dec
##
##################################################

sub decrypt {

  my $s = $_[0];
  $s =~ s/(.)/dec($1)/eg;
  return $s;

  sub dec {
    my $r = $_[0];
    if ($r eq "A") { return "L"; }
    if ($r eq "O") { return "Z"; }
    if ($r eq "Z") { return "K"; }
    if (isChar($r)) {
      my $o;
      if ((ord($r) - ENC_KEY) < 65) { $o = 90 - (65 - (ord($r) - (ENC_KEY-1))); }
        else { $o = ord($r) - ENC_KEY; }
      return chr($o);
    } else {
      return $r;
    }
  }

}

##################################################
##
##  isChar(scalar) : boolean
##
##################################################

sub isChar {
  my $r = uc($_[0]);
  if ((ord($r) > 65) && (ord($r) < 90)) { return 1; }
    else { return 0; }
}

##################################################

1;

##################################################