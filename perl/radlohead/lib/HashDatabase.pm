###############################################################################################
###############################################################################################
##
##  HashDatabase.pm
##
###############################################################################################
###############################################################################################

package HashDatabase;

###############################################################################################

use strict;
use DB_File;

###############################################################################################
##
##  HashDatabase::new( file )
##
###############################################################################################

sub new {

  my $pkg = shift;
  my ( $file ) = @_;

  my $self = bless {}, $pkg;

  $self->open( $file ) unless !$file;

  return $self;

}

###############################################################################################
##
##  HashDatabase::open( file )
##
###############################################################################################

sub open {

  my $self = shift;
  my ( $file ) = @_;

  tie %$self, 'DB_File', $file, O_RDWR|O_CREAT, 0640, $DB_HASH
    or die "Cannot tie database: $!\n";

}

###############################################################################################
##
##  HashDatabase::close()
##
###############################################################################################

sub close {

  my $self = shift;

  untie %$self;

}

###############################################################################################
##
##  HashDatabase::set( key, value )
##
###############################################################################################

sub set {

  my $self = shift;
  my ( $key, $value ) = @_;

  $self->{$key} = $value;

}

###############################################################################################
##
##  HashDatabase::append( key, value )
##
###############################################################################################

sub append {

  my $self = shift;
  my ( $key, $value ) = @_;

  $self->{$key} .= $value;

}

###############################################################################################
##
##  HashDatabase::delete( key )
##
###############################################################################################

sub delete {

  my $self = shift;
  my ( $key ) = @_;

  delete $self->{$key};

}

###############################################################################################
##
##  HashDatabase::exists( key )
##
###############################################################################################

sub exists {

  my $self = shift;
  my ( $key ) = @_;

  return defined $self->{$key};

}

###############################################################################################
##
##  HashDatabase::value( key )
##
###############################################################################################

sub value {

  my $self = shift;
  my ( $key ) = @_;

  return $self->{$key};

}

###############################################################################################
##
##  HashDatabase::get_keys()
##
###############################################################################################

sub get_keys {

  my $self = shift;

  my @keys;

  foreach my $key ( keys %$self ) {

    push( @keys, $key );

  }

  return \@keys;

}

###############################################################################################
##
##  HashDatabase::reset()
##
###############################################################################################

sub reset {

  my $self = shift;

  foreach my $key ( @{ $self->get_keys() } ) {
    $self->delete( $key );
  }

}

###############################################################################################

1;

###############################################################################################
###############################################################################################